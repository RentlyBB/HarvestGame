//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""13e529ce-cf38-40f7-8eac-e825a7a0f65c"",
            ""actions"": [
                {
                    ""name"": ""GameClickButton"",
                    ""type"": ""Button"",
                    ""id"": ""ef532438-e1ef-46a1-9eb4-764222931b05"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GameReset"",
                    ""type"": ""Button"",
                    ""id"": ""79670d1b-e48b-4dea-b9e2-f54ffd86bd55"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""72efe115-df68-4072-afa7-a7549dd32be7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GameClickButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8067f195-7db4-4fae-9706-3c4b66f135e0"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GameReset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_GameClickButton = m_Gameplay.FindAction("GameClickButton", throwIfNotFound: true);
        m_Gameplay_GameReset = m_Gameplay.FindAction("GameReset", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private IGameplayActions m_GameplayActionsCallbackInterface;
    private readonly InputAction m_Gameplay_GameClickButton;
    private readonly InputAction m_Gameplay_GameReset;
    public struct GameplayActions
    {
        private @GameInput m_Wrapper;
        public GameplayActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @GameClickButton => m_Wrapper.m_Gameplay_GameClickButton;
        public InputAction @GameReset => m_Wrapper.m_Gameplay_GameReset;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
            {
                @GameClickButton.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnGameClickButton;
                @GameClickButton.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnGameClickButton;
                @GameClickButton.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnGameClickButton;
                @GameReset.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnGameReset;
                @GameReset.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnGameReset;
                @GameReset.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnGameReset;
            }
            m_Wrapper.m_GameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @GameClickButton.started += instance.OnGameClickButton;
                @GameClickButton.performed += instance.OnGameClickButton;
                @GameClickButton.canceled += instance.OnGameClickButton;
                @GameReset.started += instance.OnGameReset;
                @GameReset.performed += instance.OnGameReset;
                @GameReset.canceled += instance.OnGameReset;
            }
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnGameClickButton(InputAction.CallbackContext context);
        void OnGameReset(InputAction.CallbackContext context);
    }
}
